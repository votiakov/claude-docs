#!/bin/sh
# AI Documentation Framework - Pre-push Hook
# Fallback: Update AI docs before push if not already done

# Enable debugging (set to 1 to enable verbose output)
DEBUG=${AI_DOCS_DEBUG:-0}

# Debug logging function
debug_log() {
    if [ "$DEBUG" = "1" ]; then
        echo "[DEBUG] $1" >&2
    fi
}

# Error logging function
error_log() {
    echo "[ERROR] $1" >&2
}

# Info logging function
info_log() {
    echo "[AI-DOCS] $1"
}

# Read AI docs configuration
if [ -f ".claude-docs/config.json" ]; then
    SOURCE_DIRS=$(python3 -c "
import json
try:
    with open('.claude-docs/config.json', 'r') as f:
        config = json.load(f)
    dirs = config.get('sourceDirectories', ['src/', 'lib/'])
    print('|'.join([d.rstrip('/') + '/' for d in dirs]))
except:
    print('src/|lib/')
" 2>/dev/null || echo "src/|lib/")
    
    FILE_EXTENSIONS=$(python3 -c "
import json
try:
    with open('.claude-docs/config.json', 'r') as f:
        config = json.load(f)
    exts = config.get('fileExtensions', ['.js', '.ts', '.py'])
    print('|'.join([ext.lstrip('.') for ext in exts]))
except:
    print('js|ts|py')
" 2>/dev/null || echo "js|ts|py")

    # Check if framework is enabled
    ENABLED=$(python3 -c "
import json
try:
    with open('.claude-docs/config.json', 'r') as f:
        config = json.load(f)
    print('true' if config.get('enabled', True) else 'false')
except:
    print('true')
" 2>/dev/null || echo "true")

    if [ "$ENABLED" != "true" ]; then
        echo "AI documentation framework is disabled. Skipping documentation check."
        exit 0
    fi
else
    # Fallback to generic defaults (covers most common scenarios)
    SOURCE_DIRS="src/|lib/|app/|components/|pages/|utils/|helpers/|modules/|packages/"
    FILE_EXTENSIONS="js|ts|jsx|tsx|py|java|rb|go|php|c|cpp|cs|rs|swift|kt|scala|clj|ex|erl|pl|r|m|h|vue|svelte"
fi

# Check if docs are up to date
LAST_COMMIT_MSG=$(git log --oneline -1)
debug_log "Last commit message: $LAST_COMMIT_MSG"

if [ -z "$(echo "$LAST_COMMIT_MSG" | grep 'docs: Auto-update AI documentation')" ]; then
    debug_log "Last commit was not a documentation update, checking for recent source changes"
    
    RECENT_CHANGES=$(git diff --name-only HEAD~5..HEAD)
    debug_log "Recent changes (last 5 commits): $RECENT_CHANGES"
    
    if echo "$RECENT_CHANGES" | grep -E "^($SOURCE_DIRS).*\.($FILE_EXTENSIONS)$" >/dev/null 2>&1; then
        info_log "Source files were modified recently but docs may not be up to date. Checking..."
        
        # Check if Claude CLI is available
        if ! command -v claude >/dev/null 2>&1; then
            error_log "Claude CLI not found. Cannot update documentation automatically."
            info_log "Please install Claude CLI or update documentation manually before pushing."
            exit 1
        fi
        
        # Check if ai_docs directory exists
        if [ ! -d "ai_docs" ]; then
            info_log "ai_docs/ directory not found. Documentation needs to be initialized."
            info_log "Please run 'claude --permission-mode acceptEdits --print \"Run /init-ai-docs\"' before pushing."
            exit 1
        fi
        
        # Get relevant files and try to update docs
        RECENT_FILES=$(echo "$RECENT_CHANGES" | grep -E "^($SOURCE_DIRS).*\.($FILE_EXTENSIONS)$" | tr '\n' ',' | sed 's/,$//')
        debug_log "Relevant recent files: $RECENT_FILES"
        
        info_log "Attempting to update documentation for recent changes..."
        
        # Capture ai_docs state before update
        BEFORE_UPDATE=$(git status --porcelain ai_docs/ 2>/dev/null || echo "")
        debug_log "ai_docs/ status before update: '$BEFORE_UPDATE'"
        
        # Capture timing for pre-push updates
        START_TIME=$(date +%s)
        
        # Run documentation update with timeout, capture output
        CLAUDE_OUTPUT_FILE=$(mktemp)
        CLAUDE_SUCCESS=false
        
        if timeout 600 claude --permission-mode acceptEdits --print "Run /update-ai-docs --changed-files='$RECENT_FILES'" > "$CLAUDE_OUTPUT_FILE" 2>&1; then
            CLAUDE_SUCCESS=true
            debug_log "Documentation update command completed successfully"
        else
            CLAUDE_EXIT_CODE=$?
            if [ $CLAUDE_EXIT_CODE -eq 124 ]; then
                info_log "Documentation update timed out, checking for partial results..."
            else
                info_log "Documentation update failed with exit code $CLAUDE_EXIT_CODE, checking for partial results..."
            fi
        fi
        
        # Calculate execution time
        END_TIME=$(date +%s)
        EXECUTION_TIME=$((END_TIME - START_TIME))
        debug_log "Claude execution took $EXECUTION_TIME seconds"
        
        # Show Claude output in debug mode
        if [ "$DEBUG" = "1" ]; then
            debug_log "Claude output:"
            cat "$CLAUDE_OUTPUT_FILE" >&2
        fi
        
        # Clean up temp file
        rm -f "$CLAUDE_OUTPUT_FILE"
        
        # Check if docs were updated (regardless of command success)
        AFTER_UPDATE=$(git status --porcelain ai_docs/ 2>/dev/null || echo "")
        debug_log "ai_docs/ status after update: '$AFTER_UPDATE'"
        
        if [ -n "$AFTER_UPDATE" ]; then
            # Files were updated - prevent push until committed
            if [ "$CLAUDE_SUCCESS" = "true" ]; then
                error_log "Documentation was updated successfully but not committed."
            else
                error_log "Documentation was updated (despite timeout/errors) but not committed."
            fi
            info_log "Please commit the documentation changes and push again:"
            info_log "  git add ai_docs/"
            info_log "  git commit -m 'docs: Update AI documentation'"
            info_log "  git push"
            exit 1
        else
            # No files updated
            if [ "$CLAUDE_SUCCESS" = "true" ]; then
                debug_log "No documentation changes were needed, proceeding with push"
            else
                info_log "Documentation update failed but no changes detected, proceeding with push"
            fi
        fi
    else
        debug_log "No relevant source files changed recently, proceeding with push"
    fi
else
    debug_log "Last commit was a documentation update, proceeding with push"
fi