#!/bin/sh
# AI Documentation Framework - Post-commit Hook
# Updates AI documentation after commit if source files were changed

# Enable debugging (set to 1 to enable verbose output)
DEBUG=${AI_DOCS_DEBUG:-0}

# Debug logging function
debug_log() {
    if [ "$DEBUG" = "1" ]; then
        echo "[DEBUG] $1" >&2
    fi
}

# Error logging function
error_log() {
    echo "[ERROR] $1" >&2
}

# Info logging function
info_log() {
    echo "[AI-DOCS] $1"
}

# Read AI docs configuration
if [ -f ".claude-docs/config.json" ]; then
    # Extract source directories and file extensions from config
    SOURCE_DIRS=$(python3 -c "
import json
try:
    with open('.claude-docs/config.json', 'r') as f:
        config = json.load(f)
    dirs = config.get('sourceDirectories', ['src/', 'lib/'])
    print('|'.join([d.rstrip('/') + '/' for d in dirs]))
except:
    print('src/|lib/')
" 2>/dev/null || echo "src/|lib/")
    
    FILE_EXTENSIONS=$(python3 -c "
import json
try:
    with open('.claude-docs/config.json', 'r') as f:
        config = json.load(f)
    exts = config.get('fileExtensions', ['.js', '.ts', '.py'])
    print('|'.join([ext.lstrip('.') for ext in exts]))
except:
    print('js|ts|py')
" 2>/dev/null || echo "js|ts|py")

    # Check if framework is enabled
    ENABLED=$(python3 -c "
import json
try:
    with open('.claude-docs/config.json', 'r') as f:
        config = json.load(f)
    print('true' if config.get('enabled', True) else 'false')
except:
    print('true')
" 2>/dev/null || echo "true")

    if [ "$ENABLED" != "true" ]; then
        echo "AI documentation framework is disabled. Skipping documentation update."
        exit 0
    fi
else
    # Fallback to generic defaults (covers most common scenarios)
    SOURCE_DIRS="src/|lib/|app/|components/|pages/|utils/|helpers/|modules/|packages/"
    FILE_EXTENSIONS="js|ts|jsx|tsx|py|java|rb|go|php|c|cpp|cs|rs|swift|kt|scala|clj|ex|erl|pl|r|m|h|vue|svelte"
fi

# Check if any files in configured source directories with configured extensions changed
CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
debug_log "Changed files: $CHANGED_FILES"
debug_log "Source dirs pattern: $SOURCE_DIRS"
debug_log "File extensions pattern: $FILE_EXTENSIONS"

if echo "$CHANGED_FILES" | grep -E "^($SOURCE_DIRS).*\.($FILE_EXTENSIONS)$" >/dev/null 2>&1; then
    info_log "Source files were modified in last commit. Updating AI documentation..."
    
    # Check if Claude CLI is available
    if ! command -v claude >/dev/null 2>&1; then
        error_log "Claude CLI not found. Please install Claude CLI to enable automatic documentation updates."
        exit 0
    fi
    
    # Check if ai_docs directory exists
    if [ ! -d "ai_docs" ]; then
        info_log "ai_docs/ directory not found. Initializing documentation..."
        debug_log "Running: claude --permission-mode acceptEdits --print 'Run /init-ai-docs'"
        
        # Run init with extended timeout since it does more work
        INIT_START_TIME=$(date +%s)
        if timeout 900 claude --permission-mode acceptEdits --print "Run /init-ai-docs" 2>&1; then
            INIT_END_TIME=$(date +%s)
            INIT_TIME=$((INIT_END_TIME - INIT_START_TIME))
            info_log "Documentation initialized successfully in ${INIT_TIME} seconds."
        else
            INIT_EXIT_CODE=$?
            INIT_END_TIME=$(date +%s)
            INIT_TIME=$((INIT_END_TIME - INIT_START_TIME))
            if [ $INIT_EXIT_CODE -eq 124 ]; then
                error_log "Documentation initialization timed out after ${INIT_TIME} seconds (15 min limit)."
            else
                error_log "Failed to initialize documentation after ${INIT_TIME} seconds."
            fi
            error_log "Please run 'claude --permission-mode acceptEdits --print \"Run /init-ai-docs\"' manually."
            exit 1
        fi
    else
        debug_log "ai_docs/ directory exists, proceeding with incremental update"
    fi
    
    # Get list of relevant changed files
    RELEVANT_FILES=$(echo "$CHANGED_FILES" | grep -E "^($SOURCE_DIRS).*\.($FILE_EXTENSIONS)$" | tr '\n' ',' | sed 's/,$//')
    debug_log "Relevant files: $RELEVANT_FILES"
    
    # Capture ai_docs state before update
    BEFORE_UPDATE=$(git status --porcelain ai_docs/ 2>/dev/null || echo "")
    debug_log "ai_docs/ status before update: '$BEFORE_UPDATE'"
    
    # Run the documentation update command
    info_log "Running documentation update for files: $RELEVANT_FILES"
    debug_log "Command: claude --permission-mode acceptEdits --print \"Run /update-ai-docs --changed-files='$RELEVANT_FILES'\""
    
    # Capture start time for timing
    START_TIME=$(date +%s)
    
    # Run claude with timeout, but capture output and exit status
    CLAUDE_OUTPUT_FILE=$(mktemp)
    CLAUDE_SUCCESS=false
    
    # Run claude with timeout to prevent hanging
    if timeout 600 claude --permission-mode acceptEdits --print "Run /update-ai-docs --changed-files='$RELEVANT_FILES'" > "$CLAUDE_OUTPUT_FILE" 2>&1; then
        CLAUDE_SUCCESS=true
        debug_log "Documentation update command completed successfully"
    else
        CLAUDE_EXIT_CODE=$?
        if [ $CLAUDE_EXIT_CODE -eq 124 ]; then
            info_log "Documentation update command timed out after 10 minutes, but checking for partial results..."
        else
            info_log "Documentation update command failed with exit code $CLAUDE_EXIT_CODE, but checking for partial results..."
        fi
    fi
    
    # Calculate execution time
    END_TIME=$(date +%s)
    EXECUTION_TIME=$((END_TIME - START_TIME))
    debug_log "Claude execution took $EXECUTION_TIME seconds"
    
    # Show Claude output in debug mode
    if [ "$DEBUG" = "1" ]; then
        debug_log "Claude output:"
        cat "$CLAUDE_OUTPUT_FILE" >&2
    fi
    
    # Check if docs were actually updated (regardless of timeout/error)
    AFTER_UPDATE=$(git status --porcelain ai_docs/ 2>/dev/null || echo "")
    debug_log "ai_docs/ status after update: '$AFTER_UPDATE'"
    
    # Clean up temp file
    rm -f "$CLAUDE_OUTPUT_FILE"
    
    # Determine overall success/failure and commit changes
    if [ -n "$AFTER_UPDATE" ]; then
        # Files were updated - this is success regardless of timeout
        if [ "$CLAUDE_SUCCESS" = "true" ]; then
            info_log "AI documentation was updated successfully. Creating documentation commit..."
            STATUS_MSG="Successfully updated"
        else
            info_log "AI documentation was updated (despite timeout/errors). Creating documentation commit..."
            STATUS_MSG="Updated with timeout/errors (${EXECUTION_TIME}s)"
        fi
        
        git add ai_docs/
        
        # Create detailed commit message
        COMMIT_HASH=$(git rev-parse HEAD~1 | cut -c1-7)
        COMMIT_MSG="docs: Auto-update AI documentation

$STATUS_MSG in ${EXECUTION_TIME} seconds
Generated from commit $COMMIT_HASH
Modified source files: $RELEVANT_FILES

Changed documentation files:"
        
        # Add list of changed documentation files
        echo "$AFTER_UPDATE" | while read -r status file; do
            COMMIT_MSG="$COMMIT_MSG\n- $file ($status)"
        done
        
        if git commit -m "$COMMIT_MSG" 2>&1; then
            info_log "Documentation commit created successfully"
            # Overall success since files were updated and committed
            exit 0
        else
            error_log "Failed to commit documentation changes"
            exit 1
        fi
    else
        # No files were updated - this is a real failure
        if [ "$CLAUDE_SUCCESS" = "true" ]; then
            info_log "Claude completed successfully but no documentation changes were detected"
            debug_log "This might indicate no updates were needed, or the update command didn't write files"
            exit 0
        else
            error_log "Documentation update failed: Claude command failed AND no files were updated"
            debug_log "Command took ${EXECUTION_TIME} seconds before failing"
            exit 1
        fi
    fi
else
    debug_log "No source files modified in last commit. Skipping documentation update."
fi